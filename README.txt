Daisy Chausseedac2183For homework 2, I modified PlayerAI.py. I used minimax and alpha-beta pruning algorithms to find the best move for a particular grid of the 2048 game. To evaluate each grid, I implemented 4 score values for ability to merge adjacent cells, number of empty cells, matrix multiplication/weights, and adjacent cell differences. The matrix is hardcoded and gives the top left cell and the top row the most weight. To determine the evaluationScore, I came up with my own weights as well. I multiplied the adjacent count by 800 and the number of empty cells by 270. I subtracted the variable “value” to ensure adjacent cells do not differ by large amounts. I kept the depth for alpha-beta pruning to be no greater than 2 because anything greater significantly slowed down the results.To run, type python GameManager.py in the command line. It displays the game grids at each move and the final score. I ran my program 60 times. Below are some helpful statistics. I hope when you run it, you always get 2048 multiple times, but there is definitely a large amount of chance depending on your starting board.average: 1197.6max: 4096min: 512mode: 1024percentage of occurrence:4096: 1.7%2048: 25%1024: 50%512:  23.3%